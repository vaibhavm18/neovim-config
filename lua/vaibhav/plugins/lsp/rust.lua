return  {

}
-- return {
--   'mrcjkb/rustaceanvim',
--   version = '^6', -- Recommended
--   lazy = false, -- This plugin is already lazy
-- 	dependencies = {
-- 		"hrsh7th/cmp-nvim-lsp",
-- 		"neovim/nvim-lspconfig",
-- 		{ "antosha417/nvim-lsp-file-operations", config = true },
-- 	},
-- 	config = function()
-- 		local util = require("lspconfig/util")
--
-- 		-- import cmp-nvim-lsp plugin
-- 		local cmp_nvim_lsp = require("cmp_nvim_lsp")
-- 		local rust = require("rustaceanvim")
--
-- 		local keymap = vim.keymap -- for conciseness
--
-- 		local opts = { noremap = true, silent = true }
-- 		local on_attach = function(_client, bufnr)
-- 			opts.buffer = bufnr
--
-- 			-- set keybinds
-- 			opts.desc = "Show LSP references"
-- 			keymap.set("n", "gR", "<cmd>Telescope lsp_references<CR>", opts) -- show definition, references
--
-- 			opts.desc = "Go to declaration"
-- 			keymap.set("n", "gD", vim.lsp.buf.declaration, opts) -- go to declaration
--
-- 			opts.desc = "Show LSP definitions"
-- 			keymap.set("n", "gd", "<cmd>Telescope lsp_definitions<CR>", opts) -- show lsp definitions
--
-- 			opts.desc = "Show LSP implementations"
-- 			keymap.set("n", "gi", "<cmd>Telescope lsp_implementations<CR>", opts) -- show lsp implementations
--
-- 			opts.desc = "Show LSP type definitions"
-- 			keymap.set("n", "gt", "<cmd>Telescope lsp_type_definitions<CR>", opts) -- show lsp type definitions
--
-- 			opts.desc = "See available code actions"
-- 			keymap.set({ "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, opts) -- see available code actions, in visual mode will apply to selection
--
-- 			opts.desc = "Smart rename"
-- 			keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts) -- smart rename
--
-- 			opts.desc = "Show buffer diagnostics"
-- 			keymap.set("n", "<leader>D", "<cmd>Telescope diagnostics bufnr=0<CR>", opts) -- show  diagnostics for file
--
-- 			opts.desc = "Show line diagnostics"
-- 			keymap.set("n", "<leader>d", vim.diagnostic.open_float, opts) -- show diagnostics for line
--
-- 			opts.desc = "Go to previous diagnostic"
-- 			keymap.set("n", "[d", vim.diagnostic.goto_prev, opts) -- jump to previous diagnostic in buffer
--
-- 			opts.desc = "Go to next diagnostic"
-- 			keymap.set("n", "]d", vim.diagnostic.goto_next, opts) -- jump to next diagnostic in buffer
--
-- 			opts.desc = "Show documentation for what is under cursor"
-- 			keymap.set("n", "K", vim.lsp.buf.hover, opts) -- show documentation for what is under cursor
--
-- 			opts.desc = "Restart LSP"
-- 			keymap.set("n", "<leader>rs", ":LspRestart<CR>", opts) -- mapping to restart lsp if necessary
--
-- 			keymap.set("n", "<C-space>", rust.hover_actions.hover_actions, { buffer = bufnr })
-- 			-- Code action groups
-- 			keymap.set("n", "<leader>a", rust.code_action_group.code_action_group, { buffer = bufnr })
-- 		end
--
-- 		-- used to enable autocompletion (assign to every lsp server config)
-- 		local capabilities = cmp_nvim_lsp.default_capabilities()
--
-- 		rust.setup({
-- 			capabilities = capabilities,
-- 			on_attach = on_attach,
-- 			cmd = {
-- 				"rustup",
-- 				"run",
-- 				"stable",
-- 				"rust-analyzer",
-- 			},
-- 			root_dir = util.root_pattern("Cargo.toml"),
-- 			filetypes = { "rust" },
-- 			settings = {
-- 				["rust-analyzer"] = {
-- 					-- enable clippy on save
-- 					checkOnSave = {
-- 						command = "clippy",
-- 					},
-- 					cargo = {
-- 						allfeatures = true,
-- 					},
-- 				},
-- 			},
-- 		})
-- 	end,
-- }
